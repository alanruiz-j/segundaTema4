import numpy as np
import math

vestido1 = [
    [0, 3, 3.5],    # 0: A
    [4, 3, 2.5],    # 1: B
    [4.5, 3, 0],    # 2: C
    [4, 3, -2.5],   # 3: D
    [0, 3, -3],     # 4: E
    [-4, 3, -2.5],  # 5: F
    [-4.5, 3, 0],   # 6: G
    [-4, 3, 2.5],   # 7: H
    [0, 5, 3],      # 8: A1
    [3.5, 5, 2],    # 9: B1
    [4, 5, 0],      # 10: C1
    [3.5, 5, -2],   # 11: K
    [0, 5, -2.5],   # 12: K2
    [-3.5, 5, -2],  # 13: K3
    [-4, 5, 0],     # 14: K4
    [-3.5, 5, 2],   # 15: K5
    [0, 8, 1.5],    # 16: H1
    [1.5, 8, 1.25], # 17: H2
    [1.5, 8, 0],    # 18: H3
    [1.5, 8, -1.25],# 19: H4
    [0, 8, -1.25],  # 20: H5
    [-1.5, 8, -1.25],# 21: H6
    [-1.5, 8, 0],   # 22: H7
    [-1.5, 8, 1.25],# 23: H8
    [0, 10, 1.25],  # 24: I1
    [1.5, 10, 1.25],# 25: I2
    [1.5, 10, -1.25],# 26: I3
    [-1.5, 10, -1.25],# 27: I4
    [-1.5, 10, 1.25],# 28: I5
    [0, 11, 2],     # 29: AA1
    [2, 11, 2],     # 30: AA2
    [2, 11, -1.5],  # 31: AA3
    [-2, 11, -1.5], # 32: AA4
    [-2, 11, 2],    # 33: AA5
    [0, 12, 1.25],  # 34: BB1
    [2.25, 12, 1.25],# 35: BB2
    [2.25, 12, -1.5],# 36: BB3
    [-2.25, 12, -1.5],# 37: BB4
    [-2.25, 12, 1.25],# 38: BB5
    [1.25, 12.75, 1],# 39: CC1
    [1.25, 12.75, -1],# 40: CC2
    [-1.25, 12.75, -1],# 41: CC3
    [-1.25, 12.75, 1],# 42: CC4
    [0, 12.75, 0.75],# 43: CC5
    [0.75, 12.75, 0], # 44: DD1
    [-0.75, 12.75, 0],# 45: DD2
    [0, 12.75, -0.75],# 46: DD3
    [0, 13, 0.5],   # 47: DD4
    [0, 13, -0.5],  # 48: DD5
    [0.5, 13, 0],   # 49: DD6
    [-0.5, 13, 0],  # 50: DD7
    [0, 13.5, 0.5], # 51: EE1
    [0, 13.5, -0.5],# 52: EE2
    [0.5, 13.5, 0], # 53: EE3
    [-0.5, 13.5, 0] # 54: EE4
]


carasVestido1 = [
    [8,0,1,9],
    [9,1,2,10],
    [10,2,3,11],
    [11,3,4,12],
    [12,4,5,13],
    [13,5,6,14],
    [14,6,7,15],
    [15,7,0,8],#--
    [16,8,9,17],
    [17,9,10,18],
    [18,10,11,19],
    [19,11,12,20],
    [20,12,13,21],
    [21,13,14,22],
    [22,14,15,23],
    [23,15,8,16],#--
    [24,16,17,25],
    [25,17,19,26],
    [26,19,21,27],
    [27,21,23,28],
    [28,23,16,24],#--
    [33,28,25,30],
    [30,25,26,31],
    [31,26,27,32],
    [32,27,28,33],#--
    [38,33,30,35],
    [35,30,31,36],
    [36,31,32,37],
    [37,32,33,38],#--
    [38,42,34],
    [42,43,34],
    [43,34,39],
    [34,39,35],
    [39,35,36,40],
    [40,36,37,41],
    [41,37,38,42],#--
    [42,43,39,40,41],#--
    [47,43,44,49],
    [49,44,46,48],
    [48,46,45,50],
    [50,45,43,47],#--
    [51,47,49,53],
    [53,49,48,52],
    [52,48,50,54],
    [54,50,47,52]
]

verticesLArm = [
    [2.25, 12, -0.5],  # 0: FF1
    [2.25, 12, 0.5],   # 1: FF2
    [2, 11.5, -0.5],   # 2: FF4
    [2, 11.5, 0.5],    # 3: FF5
    [4.93, 10.66, 0.5],# 4: PN
    [4.93, 10.66, -0.5],# 5: PO
    [4.68, 10.16, -0.5],# 6: PP
    [4.68, 10.66, 0.5],# 7: PQ
    [5.1, 10.5, -0.5], # 8: GG1
    [5.1, 10.5, 0.5],  # 9: GG2
    [7, 8.18, 0.5],    # 10: PA
    [7, 8.18, -0.5],   # 11: PZ
    [6.59, 7.84, -0.5],# 12: PW
    [6.59, 7.84, 0.5]  # 13: PV
]

carasLArm = [
    [0,1,2,3],
    [1,4,7,3],
    [0,5,4,1],
    [0,5,6,2],
    [2,6,7,3],
    [4,5,6,7],#--
    [5,6,8],
    [4,5,8,9],
    [4,7,9],#--
    [9,8,6,7],
    [9,10,13,7],
    [9,8,11,10],
    [8,11,12,6],
    [7,6,12,13],
    [10,11,12,13]
]

verticesRArm = [
    [-2.25, 12, -0.5],  # 0: FF6
    [-2.25, 12, 0.5],   # 1: FF7
    [-2, 11.5, -0.5],   # 2: FF8
    [-2, 11.5, 0.5],    # 3: FF9
    [-4.93, 10.66, 0.5],# 4: PR
    [-4.93, 10.66, -0.5],# 5: PS
    [-4.68, 10.16, -0.5],# 6: PT
    [-4.68, 10.66, 0.5],# 7: PU
    [-5.1, 10.5, -0.5], # 8: GG3
    [-5.1, 10.5, 0.5],  # 9: GG4
    [-7, 8.18, -0.5],   # 10: PC
    [-7, 8.18, 0.5],    # 11: PD
    [-6.59, 7.84, 0.5], # 12: PE
    [-6.59, 7.84, -0.5] # 13: PB
]

carasRArm = [
    [0,1,3,2],
    [0,4,7,2],
    [0,1,5,4],
    [1,3,6,5],
    [2,3,6,7],
    [4,5,6,7],#--
    [5,6,9],
    [4,5,9,8],
    [4,7,8],#--
    [8,9,6,7],
    [8,10,13,7],
    [8,9,11,10],
    [9,6,12,11],
    [6,7,13,12],
    [10,11,12,13]
]

verticesRLeg = [
    [-1.5, 7, -0.75],   # 0: KK5
    [-1.5, 7, 0.75],    # 1: KK6
    [-0.25, 7, -0.75],  # 2: KK7
    [-0.25, 7, 0.75],   # 3: KK8
    [-1.5, 3, -0.75],   # 4: PN
    [-1.5, 3, 0.75],    # 5: PO
    [-0.25, 3, 0.75],   # 6: PP
    [-0.25, 3, -0.75],  # 7: PQ
    [-1.25, 2.5, -0.5], # 8: LL5
    [-1.25, 2.5, 0.5],  # 9: LL6
    [-0.25, 2.5, -0.5], # 10: LL7
    [-0.25, 2.5, 0.5],  # 11: LL8
    [-1.25, -1.5, 0.5], # 12: PA
    [-0.25, -1.5, 0.5], # 13: PB
    [-0.25, -1.5, -0.5],# 14: PW
    [-1.25, -1.5, -0.5] # 15: PZ
]

carasRLeg = [
    [0,1,3,2],
    [1,3,6,5],
    [2,3,6,7],
    [0,2,7,4],
    [0,1,5,4],
    [4,5,6,7],#--
    [5,6,11,9],
    [6,7,10,11],
    [7,4,8,10],
    [4,5,9,8],#--
    [8,9,11,10],
    [9,11,13,12],
    [10,11,13,14],
    [10,8,15,14],
    [8,9,12,15],
    [12,13,14,15]
]

verticesLLeg = [
    [1.5, 7, -0.75],   # 0: KK1
    [1.5, 7, 0.75],    # 1: KK2
    [0.25, 7, 0.75],   # 2: KK3
    [0.25, 7, -0.75],  # 3: KK4
    [0.25, 3, 0.75],   # 4: PR
    [1.5, 3, 0.75],    # 5: PS
    [1.5, 3, -0.75],   # 6: PT
    [0.25, 3, -0.75],  # 7: PU
    [1.25, 2.5, -0.5], # 8: LL1
    [1.25, 2.5, 0.5],  # 9: LL2
    [0.25, 2.5, -0.5], # 10: LL3
    [0.25, 2.5, 0.5],  # 11: LL4
    [0.25, -1.5, -0.5],# 12: PC
    [0.25, -1.5, 0.5], # 13: PD
    [1.25, -1.5, 0.5], # 14: PE
    [1.25, -1.5, -0.5] # 15: PF
]

carasLLeg = [
    [0,1,2,3],
    [2,1,5,4],
    [1,0,6,5],
    [0,3,7,6],
    [3,2,4,7],
    [4,5,6,7],#--
    [6,7,10,8],
    [7,4,11,10],
    [4,5,9,11],
    [5,6,8,9],#--
    [8,9,11,10],
    [8,10,12,15],
    [10,11,13,12],
    [11,9,14,13],
    [9,8,15,14],
    [12,13,14,15]
]

sonrisa = [
    [-0.5, 14, 1.5],
    [-0.25, 13.75, 1.5],
    [0.25, 13.75, 1.5],
    [0.5, 14, 1.5]
]

ojo1a = [
    [-0.25, 15, 1.5],
    [-0.5, 15.25, 1.5],
    [-0.75, 15, 1.5],
    [-0.5, 14.75, 1.5],
    [-0.25, 15, 1.5]
]

ojo2a = [
    [0.25, 15, 1.5],
    [0.5, 15.25, 1.5],
    [0.75, 15, 1.5],
    [0.5, 14.75, 1.5],
    [0.25, 15, 1.5]
]

ojo1b = [
    [-0.25, 15, 1.5],
    [-0.75, 15, 1.5],
    [-0.5, 15.25, 1.5],
    [-0.5, 14.75, 1.5]
]

ojo2b = [
    [0.25, 15, 1.5],
    [0.75, 15, 1.5],
    [0.5, 15.25, 1.5],
    [0.5, 14.75, 1.5]
]

triste = [
    [-0.5, 13.5, 1.5],
    [-0.25, 13.75, 1.5],
    [0.25, 13.75, 1.5],
    [0.5, 13.5, 1.5]
]

sorpresa = [
    [-0.25, 14, 1.5],
    [-0.25, 13.75, 1.5],
    [0.25, 13.75, 1.5],
    [0.25, 14, 1.5],
    [-0.25, 14, 1.5]
]

uwu = [
    [-0.5, 14, 1.5],
    [-0.25, 13.75, 1.5],
    [0, 14, 1.5],
    [0.25, 13.75, 1.5],
    [0.5, 14, 1.5]
]

mm = [
    [-0.5,14,1.5],
    [0.5,14,1.5]
]

ceja1 = [
    [-0.5,15.5,1.5],
    [-0.25,15.25,1.5]
]

ceja2 = [
    [0.5,15.5,1.5],
    [0.25,15.25,1.5]
]

def scale_matrix_relative(matrix, scale_factor, reference_point):
    matrix_np = np.array(matrix)
    translation_matrix = matrix_np - reference_point
    scaled_matrix = translation_matrix * scale_factor
    scaled_matrix += reference_point
    return scaled_matrix.tolist()

def translate_matrix(matrix, translation_vector):
    matrix_np = np.array(matrix)
    translation_np = np.array(translation_vector)
    translated_matrix = matrix_np + translation_np
    return translated_matrix.tolist()

def rotate_matrix(matrix, axis, angle_degrees, center=[0, 0, 0]):
    angle_radians = math.radians(angle_degrees)
    cos_a = math.cos(angle_radians)
    sin_a = math.sin(angle_radians)

    if axis == 'x':
        rotation_matrix = np.array([
            [1,     0,      0],
            [0,  cos_a, -sin_a],
            [0,  sin_a,  cos_a]
        ])
    elif axis == 'y':
        rotation_matrix = np.array([
            [ cos_a, 0, sin_a],
            [     0, 1,     0],
            [-sin_a, 0, cos_a]
        ])
    elif axis == 'z':
        rotation_matrix = np.array([
            [cos_a, -sin_a, 0],
            [sin_a,  cos_a, 0],
            [    0,      0, 1]
        ])
    else:
        raise ValueError("Axis must be 'x', 'y', or 'z'")

    matrix_np = np.array(matrix)
    center_np = np.array(center)

    translated = matrix_np - center_np

    rotated = translated @ rotation_matrix.T

    rotated += center_np

    return rotated.tolist()

def print_matrix(matrix, label_prefix="Point"):
    for idx, point in enumerate(matrix):
        x, y, z = point
        print(f"{label_prefix} {idx}: ({x:.2f}, {y:.2f}, {z:.2f})")